package dk.sdu.mmmi.cbse.asteroidsystem;

import dk.sdu.mmmi.cbse.common.data.Entity;

import java.util.Random;

public class Asteroid extends Entity {
    private double maxMovingSpeed = 2;
    private double minMovingSpeed = 0.3;
    private double rotationSpeedRatio = 2.5;

    private double initialRotation = 0;
    private double rotationSpeed;
    private double movingSpeed;

    public Asteroid() {
        setPolygonCoordinates(25.95277976989746, 54.60778045654297, 24.076704025268555, 54.484710693359375, 22.210264205932617, 54.259220123291016, 20.363208770751953, 53.90932846069336, 18.549579620361328, 53.415225982666016, 16.785709381103516, 52.76577377319336, 15.088970184326172, 51.9571533203125, 13.476905822753906, 50.990753173828125, 11.965799331665039, 49.8730354309082, 10.568594932556152, 48.615718841552734, 9.273941040039062, 47.252567291259766, 8.064867496490479, 45.8128776550293, 6.936251163482666, 44.309207916259766, 5.8882904052734375, 42.74825668334961, 4.923859596252441, 41.134368896484375, 4.047136545181274, 39.471221923828125, 3.264026403427124, 37.762020111083984, 2.581497550010681, 36.01028060913086, 2.0085948705673218, 34.219749450683594, 1.5557429194450378, 32.39520454406738, 1.232670620083809, 30.543264389038086, 1.0463420301675797, 28.672653198242188, 1.0033808639273047, 26.793325424194336, 1.108684942126274, 24.916507720947266, 1.3650132417678833, 23.0543270111084, 1.772365391254425, 21.219247817993164, 2.3347491025924683, 19.425573348999023, 3.034224033355713, 17.68067169189453, 3.85624361038208, 15.989981651306152, 4.792212009429932, 14.359613418579102, 5.840313911437988, 12.799015045166016, 6.992167949676514, 11.313310623168945, 8.243553638458252, 9.910433769226074, 9.59060001373291, 8.599175930023193, 11.024672508239746, 7.383626461029053, 12.538655281066895, 6.26919412612915, 14.125936508178711, 5.261918544769287, 15.779000282287598, 4.3666768074035645, 17.489484786987305, 3.5867226123809814, 19.248579025268555, 2.9235782623291016, 21.047019958496094, 2.375818967819214, 22.870786666870117, 1.9188669323921204, 24.714811325073242, 1.5524458289146423, 26.574806213378906, 1.2781025767326355, 28.445451736450195, 1.0894234329462051, 30.323226928710938, 1.0022967343684286, 32.203521728515625, 1.005546388681978, 34.080814361572266, 1.1045540198683739, 35.95346450805664, 1.2738012671470642, 37.82060623168945, 1.4952882826328278, 39.67753219604492, 1.7898440957069397, 41.515560150146484, 2.1849430799484253, 43.32205581665039, 2.704989790916443, 45.07558822631836, 3.381563901901245, 46.742713928222656, 4.248624801635742, 48.284732818603516, 5.322225570678711, 49.64403533935547, 6.618307590484619, 50.8035774230957, 8.096060752868652, 51.772274017333984, 9.706380844116211, 52.5780143737793, 11.404561996459961, 53.24567794799805, 13.161561012268066, 53.79518127441406, 14.959488868713379, 54.25177764892578, 16.783320426940918, 54.630489349365234, 18.624975204467773, 54.94324493408203, 20.479019165039062, 55.19766616821289, 22.341955184936523, 55.3662109375, 24.214500427246094, 55.43815994262695, 26.093244552612305, 55.41263961791992, 27.973190307617188, 55.29022216796875, 29.84931755065918, 55.07012176513672, 31.71651268005371, 54.756351470947266, 33.56997299194336, 54.33517837524414, 35.40220260620117, 53.80915069580078, 37.20713424682617, 53.16020202636719, 38.97148513793945, 52.395755767822266, 40.689022064208984, 51.51451110839844, 42.34955978393555, 50.51637268066406, 43.94260787963867, 49.412811279296875, 45.46455764770508, 48.208282470703125, 46.90794372558594, 46.90726089477539, 48.264957427978516, 45.51115798950195, 49.523807525634766, 44.01026153564453, 50.65525436401367, 42.40789794921875, 51.63774108886719, 40.7195930480957, 52.46392822265625, 38.9639778137207, 53.135704040527344, 37.15937423706055, 53.6622200012207, 35.3214111328125, 54.057376861572266, 33.46223831176758, 54.33686828613281, 31.590652465820312, 54.515499114990234, 29.712934494018555, 54.61177062988281, 27.83285140991211, 54.6347541809082);

        Random random = new Random();
        movingSpeed = random.nextDouble(minMovingSpeed, maxMovingSpeed);
        rotationSpeed = movingSpeed < 1 ? movingSpeed * rotationSpeedRatio : movingSpeed * movingSpeed * rotationSpeedRatio;
    }

    public double getInitialRotation() {
        return initialRotation;
    }

    public void setInitialRotation(double initialRotation) {
        this.initialRotation = initialRotation;
    }

    public double getRotationSpeed() {
        return rotationSpeed;
    }

    public void setRotationSpeed(double rotationSpeed) {
        this.rotationSpeed = rotationSpeed;
    }

    public double getMovingSpeed() {
        return movingSpeed;
    }

    public void setMovingSpeed(double movingSpeed) {
        this.movingSpeed = movingSpeed;
    }
}
